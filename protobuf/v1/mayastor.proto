// The definition of mayastor gRPC interface.

// This interface is supposed to be independent on particular computing
// environment (i.e. kubernetes).

syntax = "proto3";

package mayastor.v1;

// Service for managing storage pools, replicas and nexus's.
// Replica holds the actual user data. From user application the
// data are accessed indirectly through nexus object.
service Mayastor {
  // Storage pool related methods.
  //
  // Storage pool is made up of block devices disks and provides a storage
  // space for thin provisioning of replicas.

  rpc CreatePool (CreatePoolRequest) returns (Pool) {}
  rpc DestroyPool (DestroyPoolRequest) returns (Null) {}
  rpc ListPools (Null) returns (ListPoolsReply) {}

  // Replica related methods.
  //
  // Replica allocates space from storage pool.

  rpc CreateReplica (CreateReplicaRequest) returns (Replica) {}

  rpc DestroyReplica (DestroyReplicaRequest) returns (Null) {}
  rpc ListReplicas (Null) returns (ListReplicasReply) {}

  rpc StatReplicas (Null) returns (StatReplicasReply) {}
  rpc ShareReplica (ShareReplicaRequest) returns (ShareReplicaReply) {}
}

// Means no arguments or no return value.
message Null {}

// Create pool arguments.
// Currently we support only concatenation of disks (RAID-0).
message CreatePoolRequest {
  string name = 1;           // name of the pool
  repeated string disks = 2; // disk device paths or URIs to be claimed by the pool
}

// State of the storage pool (terminology comes from ZFS).
enum PoolState {
  POOL_UNKNOWN = 0;
  POOL_ONLINE = 1;   // the pool is in normal working order
  POOL_DEGRADED = 2; // the pool has experienced a failure but can still function
  POOL_FAULTED = 3;  // the pool is completely inaccessible
}

// Storage pool properties
message Pool {
  string name = 1;            // name of the pool
  repeated string disks = 2;  // absolute disk paths claimed by the pool
  PoolState state = 3;        // current state of the pool
  uint64 capacity = 5;        // size of the pool in bytes
  uint64 used = 6;            // used bytes from the pool
}

// Destroy pool arguments.
message DestroyPoolRequest {
  string name = 1;  // name of the pool
}

// List of pools and their properties.
message ListPoolsReply {
  repeated Pool pools = 1;  // list of the pools
}

// Protocol for remote storage access which exposes a replica.
enum ShareProtocolReplica {
  REPLICA_NONE = 0;   // not exposed
  REPLICA_NVMF = 1;   // NVMe over Fabrics (TCP)
  REPLICA_ISCSI = 2;  // iSCSI
}

// Create replica arguments.
message CreateReplicaRequest {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  uint64 size = 3;  // size of the replica in bytes
  bool thin = 4;    // thin provisioning
  ShareProtocolReplica share = 5;  // protocol to expose the replica over
}


// Destroy replica arguments.
message DestroyReplicaRequest {
  string uuid = 1;  // name of the replica
}

// Replica properties
message Replica {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  bool thin = 3;    // thin provisioning
  uint64 size = 4;  // size of the replica in bytes
  ShareProtocolReplica share = 5;  // protocol used for exposing the replica
  string uri = 6;   // uri usable by nexus to access it
}

// List of replicas and their properties.
message ListReplicasReply {
  repeated Replica replicas = 1;  // list of the replicas
}



// NOTE: We use struct instead of more suitable map type, because JS protobuf
// lib has problem (yields garbage) when decoding maps containing u64:
// https://github.com/protobufjs/protobuf.js/issues/1203
message Stats {
  uint64 num_read_ops = 1;
  uint64 num_write_ops = 2;
  uint64 bytes_read = 3;
  uint64 bytes_written = 4;
}

// Replica stats
message ReplicaStats {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  Stats stats = 3;  // stat counters
}

// List of replicas and their properties.
message StatReplicasReply {
  repeated ReplicaStats replicas = 1;  // list of the replicas
}

// Share replica request.
message ShareReplicaRequest {
  string uuid = 1;  // uuid of the replica
  ShareProtocolReplica share = 2;  // protocol used for exposing the replica
  // Use "NONE" to disable remote access.
}

// Share replica response.
message ShareReplicaReply {
  string uri = 1;   // uri under which the replica is accessible by nexus
}

// Anything what follows here are private interfaces used for interacting with
// mayastor outside the scope of CSI.

service BdevRpc {
  rpc List(Null) returns (Bdevs) {}
  rpc Create(BdevUri) returns (CreateReply) {}
  rpc Destroy(BdevUri) returns (Null) {}
  rpc Share(BdevShareRequest) returns (BdevShareReply) {}
  rpc Unshare(CreateReply) returns (Null) {}
}

message BdevShareRequest {
  string name = 1;
  string proto = 2;
}

message BdevShareReply {
  string uri = 1;
}

message Bdev {
  string name = 1;
  string uuid = 2;
  uint64 num_blocks = 3;
  uint32 blk_size = 5;
  bool claimed = 6;
  string claimed_by = 7;
  string aliases = 8;
  string uri = 9;
  string product_name = 10;
  string share_uri = 11;

}

message Bdevs {
  repeated Bdev bdevs = 1;
}

message BdevUri {
  string uri = 1;
}

message CreateReply {
  string name = 1;
}


// SPDK json-rpc proxy service

service JsonRpc {
  // Call a (SPDK) json-rpc method
  rpc JsonRpcCall (JsonRpcRequest) returns (JsonRpcReply) {}
}

message JsonRpcRequest {
  string method = 1;
  string params = 2;
}

message JsonRpcReply {
  string result = 1;
}